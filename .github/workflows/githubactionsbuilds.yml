name: GitHubActionsBuilds

on: push

jobs:
  generate_version_number:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ github.ref == 'refs/heads/master' && steps.buildnumber.outputs.build_number || 1 }}
    steps:
    - name: Generate build number
      if: github.ref == 'refs/heads/master'
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{secrets.github_token}}

  build_docker_monogame_blazor:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: devedse
        password: ${{ secrets.DOCKERHUBTOKEN }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v3
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Set Image Tags
      id: tags
      run: |
        VERSION=1.0.${{needs.generate_version_number.outputs.build_number}}
        echo Version: $VERSION
        echo github.ref: ${{ github.ref }}
        echo github.actor: ${{ github.actor }}
        echo branch name: ${GITHUB_REF#refs/heads/}
        BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
        echo parsed branch name: ${BRANCH_NAME}

        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

        if [[ "${{ github.ref }}" == 'refs/heads/master' ]]; then
          echo "TAGS=-t devedse/develineplatformermonogameblazor:${VERSION} -t devedse/develineplatformermonogameblazor:latest" >> $GITHUB_OUTPUT
        elif [[ "${{ github.actor }}" == 'dependabot[bot]' ]]; then
          echo "TAGS=-t devedse/develineplatformermonogameblazor:beta_${BRANCH_NAME}" >> $GITHUB_OUTPUT
        else 
          echo "TAGS=-t devedse/develineplatformermonogameblazor:beta_${BRANCH_NAME} -t devedse/develineplatformermonogameblazor:beta_nightly" >> $GITHUB_OUTPUT
        fi
    - name: Run Buildx
      run: |
        docker buildx build -f DeveLinePlatformer.MonoGame.Blazor/Dockerfile --build-arg BUILD_VERSION=${{steps.tags.outputs.version}} --platform linux/arm64,linux/amd64 ${{steps.tags.outputs.tags}} ${{ (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) && '--push' || '' }} .


  build_linux:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --no-restore --verbosity normal

  build_windows:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '19' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64
    - name: Install tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: SonarQube begin
      if: github.actor != 'dependabot[bot]'
      run: dotnet-sonarscanner begin /k:"DeveLinePlatformer" /o:"devedse-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{secrets.SONARQUBETOKEN}} /d:sonar.cs.opencover.reportsPaths=".\DeveLinePlatformer.Tests\TestResults\Coverage\coverage.opencover.xml" /d:sonar.coverage.exclusions="DeveLinePlatformer.ConsoleApp/**/*.cs,DeveLinePlatformer.Tests/**/*.cs,DeveLinePlatformer.Web/wwwroot/divisionmaze/**/*.js"
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --verbosity normal --no-build -c Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
    - name: SonarQube end
      if: github.actor != 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: dotnet-sonarscanner end /d:sonar.login=${{secrets.SONARQUBETOKEN}}
    - name: Pack
      run: dotnet pack DeveLinePlatformer\DeveLinePlatformer.csproj --verbosity normal --no-build -c Release /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Run CodeCov
      uses: codecov/codecov-action@v3
      with:
        directory: ./DeveLinePlatformer.Tests/TestResults
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

    - name: Run GoPackage.ps1 script
      run: .\Scripts\GoPackage.ps1
      shell: pwsh


    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer7z
        path: ./Scripts/Output/DeveLinePlatformer.7z
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformerZip
        path: ./Scripts/Output/DeveLinePlatformer.zip
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformerNuGet
        path: |
          ./DeveLinePlatformer/bin/Release/*.nupkg
          ./DeveLinePlatformer/bin/Release/*.snupkg

  build_linux_monogame_desktopgl:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --no-restore --verbosity normal
    - name: Publish
      run: dotnet publish ./DeveLinePlatformer.MonoGame.DesktopGL/DeveLinePlatformer.MonoGame.DesktopGL.csproj -r linux-x64 -c Release /p:PublishSingleFile=true /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=true /p:PublishTrimmed=false /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Copy files that are missing for some reason
      run: |
        # not needed on linux as it seems
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/linux-x64
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/linux-x64/publish
      shell: bash
    - name: targz output
      run: |
        export GZIP=-9
        tar cvzf DeveLinePlatformer.MonoGame.DesktopGL_linux-x64.tar.gz -C DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/linux-x64/publish .
    - name: 7zip output
      run: |
        7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "DeveLinePlatformer.MonoGame.DesktopGL_linux-x64.7z" "./DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/linux-x64/publish/*" '-x!*.pdb'
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.DesktopGL_linux-x64
        path: DeveLinePlatformer.MonoGame.DesktopGL_linux-x64.tar.gz

  # AppIcon is missing when building windows application on linux
  # So don't use this build
  # See: https://github.com/dotnet/runtime/issues/3828
  build_windows_monogame_desktopgl_onlinux:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --no-restore --verbosity normal
    - name: Publish
      run: dotnet publish ./DeveLinePlatformer.MonoGame.DesktopGL/DeveLinePlatformer.MonoGame.DesktopGL.csproj -r win-x64 -c Release /p:PublishSingleFile=true /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=true /p:PublishTrimmed=false /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Copy files that are missing for some reason
      run: |
        # not needed on linux as it seems
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64
        cp DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/SDL2.dll DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish/
        cp -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/Content/. DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish/Content/
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish
      shell: bash
    - name: targz output
      run: |
        export GZIP=-9
        tar cvzf DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux.tar.gz -C DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish .
    - name: 7zip output
      run: |
        7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux.7z" "./DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish/*" '-x!*.pdb'
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinuxtargz
        path: DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux.tar.gz
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux
        path: DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux.7z

  build_windows_monogame_desktopgl:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --no-restore --verbosity normal
    - name: Publish
      run: dotnet publish ./DeveLinePlatformer.MonoGame.DesktopGL/DeveLinePlatformer.MonoGame.DesktopGL.csproj -r win-x64 -c Release /p:PublishSingleFile=true /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=true /p:PublishTrimmed=false /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Copy files that are missing for some reason
      run: |
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64
        cp DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/SDL2.dll DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish/
        cp -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/Content/. DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/publish/Content/
        ls -R DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/Publish
      shell: bash
    - name: 7zip output
      run: |
        7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "DeveLinePlatformer.MonoGame.DesktopGL_win-x64.7z" "./DeveLinePlatformer.MonoGame.DesktopGL/bin/Release/net8.0/win-x64/Publish/*" '-x!*.pdb'
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.DesktopGL_win-x64
        path: DeveLinePlatformer.MonoGame.DesktopGL_win-x64.7z

  build_windows_monogame_windowsdx:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet restore DeveLinePlatformer.sln
    - name: Build
      run: dotnet build DeveLinePlatformer.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Test
      run: dotnet test DeveLinePlatformer.sln --no-restore --verbosity normal
    - name: Publish
      run: dotnet publish ./DeveLinePlatformer.MonoGame.WindowsDX\DeveLinePlatformer.MonoGame.WindowsDX.csproj -r win-x64 -c Release /p:PublishSingleFile=true /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=true /p:PublishTrimmed=false /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Copy files that are missing for some reason
      run: |
        ls -R DeveLinePlatformer.MonoGame.WindowsDX/bin/Release/net8.0-windows/win-x64
        cp -R DeveLinePlatformer.MonoGame.WindowsDX/bin/Release/net8.0-windows/win-x64/Content/. DeveLinePlatformer.MonoGame.WindowsDX/bin/Release/net8.0-windows/win-x64/publish/Content/
        ls -R DeveLinePlatformer.MonoGame.WindowsDX/bin/Release/net8.0-windows/win-x64/Publish
      shell: bash
    - name: 7zip output
      run: |
        7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "DeveLinePlatformer.MonoGame.WindowsDX_win-x64.7z" "./DeveLinePlatformer.MonoGame.WindowsDX/bin/Release/net8.0-windows/win-x64/Publish/*" '-x!*.pdb'
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.WindowsDX_win-x64
        path: DeveLinePlatformer.MonoGame.WindowsDX_win-x64.7z


  build_windows_Android:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install workload android
      run: |
        dotnet workload install android
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3
    - name: Set Android version
      uses: damienaicheh/update-android-version-manifest-action@v1.0.0
      with:
        android-manifest-path: ./DeveLinePlatformer.MonoGame.Android/AndroidManifest.xml
        version-name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        version-code: ${{needs.generate_version_number.outputs.build_number}}
        print-file: true
    - name: Restore NuGet packages
      run: |
        nuget restore DeveLinePlatformer/DeveLinePlatformer.csproj
        nuget restore DeveLinePlatformer.MonoGame.Core/DeveLinePlatformer.MonoGame.Core.csproj
        nuget restore DeveLinePlatformer.MonoGame.Android/DeveLinePlatformer.MonoGame.Android.csproj
    - name: Build Android
      run: |
        #dotnet build DeveLinePlatformer.MonoGame.Android/DeveLinePlatformer.MonoGame.Android.csproj -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
        #msbuild /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}} /p:AndroidBuildApplicationPackage=true /p:Configuration=Release /p:AndroidPackageFormat=aab /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias=DevedseCert /p:AndroidSigningKeyPass=${{secrets.ANDROIDKEYSTOREPASSWORD}} /p:AndroidSigningKeyStore=DevedseCert.keystore /p:AndroidSigningStorePass=${{secrets.ANDROIDKEYSTOREPASSWORD}} DeveLinePlatformer.MonoGame.Android\DeveLinePlatformer.MonoGame.Android.csproj
        msbuild /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}} /p:AndroidBuildApplicationPackage=true /p:Configuration=Release /p:AndroidPackageFormat=aab ${{ github.actor != 'dependabot[bot]' && format('/p:AndroidKeyStore=true /p:AndroidSigningKeyAlias=DevedseCert /p:AndroidSigningKeyPass={0} /p:AndroidSigningKeyStore=DevedseCert.keystore /p:AndroidSigningStorePass={0}', secrets.ANDROIDKEYSTOREPASSWORD) || '' }} DeveLinePlatformer.MonoGame.Android\DeveLinePlatformer.MonoGame.Android.csproj
    - name: dotnet test
      run: dotnet test DeveLinePlatformer.Tests/DeveLinePlatformer.Tests.csproj -c Release --verbosity normal
    # - name: Package sources
    #   run: |
    #     7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "./Scripts/Output/DeveLinePlatformer.MonoGame.Android.7z" "DeveLinePlatformer.MonoGame.Android\*" '-x!*.pdb'
    #   shell: powershell
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.Android_aab
        path: ./DeveLinePlatformer.MonoGame.Android/bin/Release/net8.0-android/develineplatformermonogame_android.develineplatformermonogame_android-Signed.aab


  build_windows_AndroidForFireStick:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install workload android
      run: |
        dotnet workload install android
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3
    - name: Set Android version
      uses: damienaicheh/update-android-version-manifest-action@v1.0.0
      with:
        android-manifest-path: ./DeveLinePlatformer.MonoGame.Android/AndroidManifest.xml
        version-name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        version-code: ${{needs.generate_version_number.outputs.build_number}}
        print-file: true
    - name: Restore NuGet packages
      run: |
        nuget restore DeveLinePlatformer/DeveLinePlatformer.csproj
        nuget restore DeveLinePlatformer.MonoGame.Core/DeveLinePlatformer.MonoGame.Core.csproj
        nuget restore DeveLinePlatformer.MonoGame.Android/DeveLinePlatformer.MonoGame.Android.csproj
    - name: Build Android
      run: |
        #dotnet build DeveLinePlatformer.MonoGame.Android/DeveLinePlatformer.MonoGame.Android.csproj -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
        #msbuild /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}} /p:AndroidBuildApplicationPackage=true /p:Configuration=Release /p:AndroidPackageFormat=apk /p:AndroidKeyStore=true /p:AndroidSigningKeyAlias=DevedseCert /p:AndroidSigningKeyPass=${{secrets.ANDROIDKEYSTOREPASSWORD}} /p:AndroidSigningKeyStore=DevedseCert.keystore /p:AndroidSigningStorePass=${{secrets.ANDROIDKEYSTOREPASSWORD}} DeveLinePlatformer.MonoGame.Android\DeveLinePlatformer.MonoGame.Android.csproj
        msbuild /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}} /p:AndroidBuildApplicationPackage=true /p:Configuration=Release /p:AndroidPackageFormat=apk ${{ github.actor != 'dependabot[bot]' && format('/p:AndroidKeyStore=true /p:AndroidSigningKeyAlias=DevedseCert /p:AndroidSigningKeyPass={0} /p:AndroidSigningKeyStore=DevedseCert.keystore /p:AndroidSigningStorePass={0}', secrets.ANDROIDKEYSTOREPASSWORD) || '' }} DeveLinePlatformer.MonoGame.Android\DeveLinePlatformer.MonoGame.Android.csproj
    - name: dotnet test
      run: dotnet test DeveLinePlatformer.Tests/DeveLinePlatformer.Tests.csproj -c Release --verbosity normal
    # - name: Package sources
    #   run: |
    #     7z a -t7z -m0=LZMA2 -mmt=on -mx9 -md=1536m -mfb=273 -ms=on -mqs=on -sccUTF-8 "./Scripts/Output/DeveLinePlatformer.MonoGame.Android.7z" "DeveLinePlatformer.MonoGame.Android\*" '-x!*.pdb'
    #   shell: powershell
    - uses: actions/upload-artifact@v3
      with:
        name: DeveLinePlatformer.MonoGame.Android_apk
        path: ./DeveLinePlatformer.MonoGame.Android/bin/Release/net8.0-android/develineplatformermonogame_android.develineplatformermonogame_android-Signed.apk


  release_github:
    needs: [
      generate_version_number,
      build_windows,
      build_linux,
      build_docker,
      build_linux_monogame_desktopgl,
      build_windows_monogame_desktopgl_onlinux,
      build_windows_monogame_desktopgl,
      build_windows_monogame_windowsdx,
      build_windows_Android,
      build_windows_AndroidForFireStick]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts/

    - name: Display structure of downloaded files
      run: |
        cd ./artifacts/
        ls -R
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        release_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        body: |
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        files: |
          ./artifacts/DeveLinePlatformer7z/DeveLinePlatformer.7z
          ./artifacts/DeveLinePlatformerZip/DeveLinePlatformer.zip
          ./artifacts/DeveLinePlatformerNuGet/*.nupkg
          ./artifacts/DeveLinePlatformerNuGet/*.snupkg
          ./artifacts/DeveLinePlatformer.MonoGame.DesktopGL_linux-x64/DeveLinePlatformer.MonoGame.DesktopGL_linux-x64.tar.gz
          ./artifacts/DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux/DeveLinePlatformer.MonoGame.DesktopGL_win-x64_onlinux.7z
          ./artifacts/DeveLinePlatformer.MonoGame.DesktopGL_win-x64/DeveLinePlatformer.MonoGame.DesktopGL_win-x64.7z
          ./artifacts/DeveLinePlatformer.MonoGame.WindowsDX_win-x64/DeveLinePlatformer.MonoGame.WindowsDX_win-x64.7z
          ./artifacts/DeveLinePlatformer.MonoGame.Android_aab/develineplatformermonogame_android.develineplatformermonogame_android-Signed.aab
          ./artifacts/DeveLinePlatformer.MonoGame.Android_apk/develineplatformermonogame_android.develineplatformermonogame_android-Signed.apk
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.Untrimmed.exe
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.Trimmed.exe
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.TrimmedAot.exe
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.Untrimmed
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.Trimmed
          ./artifacts/DeveLinePlatformer.ConsoleApp/DeveMazeGenerator.ConsoleApp.TrimmedAot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}